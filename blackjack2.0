{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9e5159bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing useful functions\n",
    "\n",
    "import random\n",
    "\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d65fd993",
   "metadata": {},
   "outputs": [],
   "source": [
    "#create gloabal class\n",
    "\n",
    "\n",
    "        \n",
    "        \n",
    "class Cards():\n",
    "    def __init__(self,value,suit):\n",
    "        self.value = value\n",
    "        self.suit = suit\n",
    "\n",
    "        \n",
    "    def __str__(self):\n",
    "        return f'{self.value} of {self.suit}'\n",
    "        \n",
    "    \n",
    "\n",
    "    \n",
    "    def __repr__(self):\n",
    "        return f'< card {self.value} of {self.suit}>'\n",
    "    \n",
    "\n",
    "    \n",
    "\n",
    "    \n",
    "class Participant():\n",
    "    def __init__(self):\n",
    "        self.hand = [] \n",
    "\n",
    "        \n",
    "    def getTotal(self):\n",
    "        self.total = 0\n",
    "        for card in self.hand:\n",
    "            self.total += card.value\n",
    "        return self.total\n",
    "\n",
    "\n",
    "class Deck():\n",
    "    suits = ['diamonds', 'hearts', 'spades', 'clovers']\n",
    "    value = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n",
    "    \n",
    "    def deal(self, participant):\n",
    "         participant.hand.append(self.cards.pop()) \n",
    "        \n",
    "        \n",
    "        \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    def __init__(self):\n",
    "        self.cards = []\n",
    "        for suit in self.suits:\n",
    "            for num in self.value:\n",
    "                card = Cards(num,suit)\n",
    "                self.cards.append(card)\n",
    "        random.shuffle(self.cards) \n",
    "                \n",
    "class Dealer(Participant):\n",
    "    def __init__(self):\n",
    "        \n",
    "        super().__init__()\n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "        \n",
    "        \n",
    "        \n",
    "class Player(Participant):\n",
    "    def __init__(self):\n",
    "        \n",
    "        super().__init__()\n",
    "        \n",
    "\n",
    "    \n",
    "def dealCards():\n",
    "    deck= Deck()\n",
    "    dealer1 = Dealer()\n",
    "    player1= Player()\n",
    "    deck.deal(dealer1)\n",
    "    print(f'dealer shows {dealer1.hand}')\n",
    "    deck.deal(dealer1)\n",
    "    if dealer1.getTotal() == 21:\n",
    "        print(f'dealer has {dealer1.getTotal()} dealer wins')\n",
    "        return 'winner'\n",
    "        \n",
    "    elif dealer1.getTotal() > 21:\n",
    "        print(f'dealer has {dealer1.getTotal()} dealer busts! Player wins! ')\n",
    "        return \"winner\"\n",
    "        \n",
    "    elif dealer1.getTotal() < 21:\n",
    "        print('Dealer1 takes 1 card')\n",
    "        deck.deal(dealer1)\n",
    "    print('player is dealt two cards')    \n",
    "    deck.deal(player1)\n",
    "    deck.deal(player1)\n",
    "    print(f'player has {player1.hand}')\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    if player1.getTotal() == 21:\n",
    "        print(f'player has {player1.getTotal()} player wins!')\n",
    "        return 'winner'\n",
    "        \n",
    "    elif player1.getTotal() > 21:\n",
    "        print(f'player has {player1.getTotal()} player busts! dealer wins!')\n",
    "        return 'winner'\n",
    "        \n",
    "    else:\n",
    "        playerHit = input('do you want to hit or call.?')\n",
    "        if playerHit == 'hit':\n",
    "            deck.deal(player1)\n",
    "            print(f'player has {player1.hand}')\n",
    "            if player1.getTotal() == 21:\n",
    "                print(\"player wins\")\n",
    "                return 'winner'\n",
    "            elif player1.getTotal() > 21:\n",
    "                print(\"dealer wins\")\n",
    "                return 'winner'\n",
    "            else:\n",
    "                hitTwo = input('do you want to hit or call? ')\n",
    "                if hitTwo == 'hit':\n",
    "                    deck.deal(player1)\n",
    "                    print(f'player has {player1.hand}')\n",
    "                    if player1.getTotal() == 21:\n",
    "                        print(\"player wins\")\n",
    "                        return 'winner'\n",
    "                    elif player1.getTotal() > 21:\n",
    "                        print(\"dealer wins\")\n",
    "                        return 'winner'\n",
    "                elif hitTwo == 'call':\n",
    "                    print(f'player has {player1.getTotal()}')\n",
    "                    print(f'dealer has {dealer1.getTotal()}')\n",
    "                    if player1.getTotal() == 21:\n",
    "                        print(\"player wins\")\n",
    "                        return 'winner'\n",
    "                    elif player1.getTotal()> 21:\n",
    "                        print('player busts, dealer wins')\n",
    "                        return 'winner'\n",
    "                    elif dealer1.getTotal() ==21:\n",
    "                        print('dealer wins')\n",
    "                        return 'winner'\n",
    "                    elif dealer1.getTotal()>21:\n",
    "                        print('dealer busts player 1 wins')\n",
    "                        return 'winner'\n",
    "                    elif player1.getTotal()< dealer1.getTotal():\n",
    "                        print('dealer1 wins')\n",
    "                        return 'winner'\n",
    "                    elif player1.getTotal()> dealer1.getTotal():\n",
    "                        print('player1 wins')\n",
    "                        return 'winner'\n",
    "                    else:\n",
    "                        print('tie game')\n",
    "\n",
    "            \n",
    "            \n",
    "        elif playerHit == 'call':\n",
    "            print(f'player has {player1.getTotal()}')\n",
    "            print(f'dealer has {dealer1.getTotal()}')\n",
    "            if player1.getTotal() == 21:\n",
    "                print(\"player wins\")\n",
    "                return 'winner'\n",
    "            elif player1.getTotal()> 21:\n",
    "                print('player busts, dealer wins')\n",
    "                return 'winner'\n",
    "            elif dealer1.getTotal() ==21:\n",
    "                print('dealer wins')\n",
    "                return 'winner'\n",
    "            elif dealer1.getTotal()>21:\n",
    "                print('dealer busts player 1 wins')\n",
    "                return 'winner'\n",
    "            elif player1.getTotal()< dealer1.getTotal():\n",
    "                print('dealer1 wins')\n",
    "                return 'winner'\n",
    "            elif player1.getTotal()> dealer1.getTotal():\n",
    "                print('player1 wins')\n",
    "                return 'winner'\n",
    "            else:\n",
    "                print('tie game')\n",
    "        \n",
    "        \n",
    "\n",
    "    \n",
    "\n",
    "              \n",
    "              \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ba8c3a85",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\n",
    "# deck.deal(player1)\n",
    "\n",
    "# print(player1.hand)\n",
    "# print(player1.getTotal())\n",
    "\n",
    "# rules()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "687847f3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ready to play y/n?y\n",
      "dealer shows [< card 11 of diamonds>]\n",
      "Dealer1 takes 1 card\n",
      "player is dealt two cards\n",
      "player has [< card 10 of hearts>, < card 2 of diamonds>]\n",
      "do you want to hit or call.?y\n"
     ]
    }
   ],
   "source": [
    "def startGame():\n",
    "    while True:\n",
    "        readyP = input('ready to play y/n?')\n",
    "        if readyP == 'y':\n",
    "        \n",
    "            winner = dealCards()\n",
    "            if  winner:\n",
    "                pass\n",
    "            elif not winner:\n",
    "                pass\n",
    "\n",
    "\n",
    "            \n",
    "\n",
    "startGame()\n",
    "\n",
    "    \n",
    "        \n",
    "\n",
    "    \n",
    "        \n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "868b9c2c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
